{
    "contents" : "library(XML)\nlibrary(googleVis)\nlibrary(dplyr)\ncleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){\n  if(!is.data.frame(dat)){\n    dat <- dat[[table]]\n  }\n  if(is.na(dropFirstCol)) {\n    firstCol <- na.omit(dat[[1]])\n    if(all(firstCol == \".\") || all(firstCol== as.character(seq_along(firstCol)))) {\n      dat <- dat[, -1]\n    }\n  } else if(dropFirstCol) {\n    dat <- dat[, -1]\n  }\n  if(skip > 0){\n    dat <- dat[-seq_len(skip), ]\n  }\n  if(nrow(dat) == 1) return(dat)\n  if(nrow(dat) >= 2){\n    if(all(is.na(dat[2, ]))) dat <- dat[-2, ]\n  }\n  if(header && nrow(dat) > 1){\n    header <- as.character(dat[1, ])\n    names(dat) <- header\n    dat <- dat[-1, ]\n  }\n  # Keep only desired columns\n  if(!is.na(ncols)){\n    ncols <- min(ncols, ncol(dat))\n    dat <- dat[, seq_len(ncols)]\n  }\n  # Keep only desired rows\n  if(nrows > 0){\n    nrows <- min(nrows, nrow(dat))\n    dat <- dat[seq_len(nrows), ]\n  }\n  # Rename rows\n  rownames(dat) <- seq_len(nrow(dat))\n  dat\n}\n\n\nreadGoogleSheet <- function(url, na.string=\"\", header=TRUE){\n  stopifnot(require(XML))\n  # Suppress warnings because Google docs seems to have incomplete final line\n  suppressWarnings({\n    doc <- paste(readLines(url), collapse=\" \")\n  })\n  if(nchar(doc) == 0) stop(\"No content found\")\n  htmlTable <- gsub(\"^.*?(<table.*</table).*$\", \"\\\\1>\", doc)\n  ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)\n  lapply(ret, function(x){ x[ x == na.string] <- NA; x})\n}\n\nlink <- 'https://docs.google.com/spreadsheets/d/1S5qxi6EKlcZNzjBmUr6MqSb6_HYs6oWRNxbxU0RhYV4/pubhtml'\n\ngdoc <- link\nelem <- readGoogleSheet(gdoc)\ndf <- cleanGoogleTable(elem, table=1)\nhead(df)\n\n#####\n# CLEAN\n#####\n#df$Type <- factor(df$Type)\ndf$date <- as.Date(paste0(sub(' .*$', '', df$Time), '/2015'), \n                   format = '%m/%d/%Y')\ndf$time <- sub('(.*) ', '', df$Time)\ntemp <- strsplit(df$time, ':')\ndf$hour <- unlist(lapply(temp, function(x){as.numeric(x[[1]])}))\ndf$minute <- unlist(lapply(temp, function(x){as.numeric(x[[2]])}))\ndf$time2 <- df$hour + (df$minute / 60)\n\n# Get day number\ndf$day <- as.numeric(df$date) - 16583\n# df$day <- ifelse(df$hour <= 6,\n#                  df$day -1,\n#                  df$day)\n\n# day-time\ndf$time3 <- (df$day *24) + df$time2\n\ndf$Duration <- as.numeric(df$Duration)\ndf$Duration[which(is.na(df$Duration))] <- 0\n\ndf$day_char <- as.character(df$day)\n\n#####\n# ORDER\n#####\ndf <- df %>%\n  arrange(date, hour, minute)\n\n#####\n# MAKE A CLEANED TYPE\n#####\ndf$type <- ifelse(df$Type == 'Left breast',\n                  'Breastfeed',\n                  ifelse(df$Type == 'Right breast',\n                         'Breastfeed',\n                         ifelse(df$Type == 'Feed from pump',\n                                'Breastfeed',\n                         df$Type)))\n\n\n# Better time objects\ndf$start <- as.POSIXlt(paste0(df$date, ' ', \n                              df$time,\n                              ':00 EDT'))\ndf$end <- df$start + (df$Duration * 60)\n\n########\n# PLOT\n########\n\n# z <- df\n# x <- gvisTimeline(data = z,\n#              rowlabel = 'Type',\n#              barlabel = 'time',\n#              start = 'start',\n#              end = 'end',\n#              options=list(#timeline=\"{groupByRowLabel:false}\",\n#                           backgroundColor='#ffd', \n#                           height=350,\n#                           colors=\"['#cbb69d', '#603913', '#c69c6e']\"))\n",
    "created" : 1433110909391.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3502328834",
    "id" : "B0E4973A",
    "lastKnownWriteTime" : 1433136472,
    "path" : "~/Desktop/schedule/read_in.R",
    "project_path" : "read_in.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}